[{"D:\\Dev\\project\\chill-sound\\src\\index.js":"1","D:\\Dev\\project\\chill-sound\\src\\App.js":"2","D:\\Dev\\project\\chill-sound\\src\\reportWebVitals.js":"3","D:\\Dev\\project\\chill-sound\\src\\components\\playing_card\\MusicPlayerCard.js":"4","D:\\Dev\\project\\chill-sound\\src\\components\\Song\\Song.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":213,"mtime":1620520418656,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":7619,"mtime":1622178987627,"results":"10","hashOfConfig":"7"},{"size":1839,"mtime":1620233539697,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jhistf",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Dev\\project\\chill-sound\\src\\index.js",[],"D:\\Dev\\project\\chill-sound\\src\\App.js",[],"D:\\Dev\\project\\chill-sound\\src\\reportWebVitals.js",[],"D:\\Dev\\project\\chill-sound\\src\\components\\playing_card\\MusicPlayerCard.js",["23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40"],"import React,{useState,useEffect,useRef} from 'react'\r\nimport './MusicPlayerCard.scss'\r\nimport audios from \"../Song/Song\";\r\nimport {AiFillPauseCircle, AiFillPlayCircle, BiSkipNext, BiSkipPrevious, FaRandom, FiRepeat} from \"react-icons/all\";\r\nconst MusicPlayerCard =()=>{\r\n    const [song]=useState(audios)\r\n    const [index,setIndex]=useState([]);\r\n    function calTimer(time){\r\n        let min=Math.floor(time/60)\r\n        let sec=Math.round(time%60)\r\n        if(sec<10) sec='0'+sec\r\n        return `${min}:${sec}`\r\n\r\n    }\r\n    const[currentTime, setCurrentTime]=useState(0);\r\n    const intervalRef=useRef()\r\n    const [changeTime,setChangeTime]=useState('0:00');\r\n    const [lengthTime,setLenghTime]=useState([calTimer(0),0]);\r\n    const [isPlay,setIsPlay]=useState(false)\r\n    const[isRepeat,setIsRepeat]=useState(false)\r\n    const[isRandom,setIsRandom]=useState(false)\r\n    const[width,setWidth]=useState(0)\r\n    let style={\r\n        width: `${width}%`\r\n    }\r\n    let clickedStyle={color:'#ef1e21'}\r\n    let notClickedStyle={color:'#cccccc'}\r\n    const [audio,setAudio]=useState()\r\n    const [songID,setSongID]=useState()\r\n    function clickCard(numb) {\r\n        setCurrentTime(0)\r\n        setSongID(document.getElementById(`song_${index}`))\r\n        if (index!==numb){\r\n            setIndex(numb);\r\n            setAudio(new Audio(song[numb].src))\r\n            if (audio!=undefined) {\r\n                stop()\r\n            }\r\n        }\r\n        else {\r\n            if (audio!=undefined){\r\n                audio.load()\r\n                audio.play()\r\n            }\r\n        }\r\n    }     // change song\r\n    function play(){\r\n        setCurrentTime( audio.currentTime)\r\n        intervalRef.current = setInterval(creaseNum, 1000);\r\n        const isPlaying = audio.currentTime > 0 && !audio.paused && !audio.ended  && audio.readyState > audio.HAVE_CURRENT_DATA;\r\n        if(!isPlaying) audio.play()\r\n    }\r\n    function stop() {\r\n        audio.currentTime=0\r\n        audio.pause()\r\n    }\r\n    function pause(){\r\n        clearInterval(intervalRef.current)\r\n        audio.pause()\r\n    }\r\n    function skipnext(){\r\n        if(isPlay){\r\n            if(!isRandom){\r\n                if (index<11)clickCard(index+1)\r\n            }\r\n            else clickCard(Math.floor(Math.random()*11))\r\n        }\r\n    }\r\n    function skipprev(){\r\n        if(isPlay){\r\n            if(!isRandom){\r\n                if (index>0 ) clickCard(index-1)\r\n            }\r\n            else clickCard(Math.floor(Math.random()*11))\r\n        }\r\n    }\r\n    function playclick(){\r\n        if(index.length!=0){setIsPlay(!isPlay);play()}\r\n        else {\r\n            clickCard(Math.floor(Math.random()*11))\r\n        }\r\n    }\r\n    function pauseclick(){\r\n        if (index.length!=0){setIsPlay(!isPlay);pause();}\r\n    }\r\n    const creaseNum=()=>setCurrentTime(currentTime=>currentTime+1)\r\n    useEffect(()=>{\r\n        intervalRef.current=setInterval(creaseNum,1000)\r\n        return () => clearInterval(intervalRef.current);\r\n    },[])\r\n    function slide(e){\r\n        if(isPlay){\r\n            if(audio!=undefined){\r\n                audio.pause()\r\n                clearInterval(intervalRef.current)\r\n                setCurrentTime(e.target.value)\r\n                audio.currentTime=e.target.value\r\n                play()\r\n            }\r\n        }\r\n    }\r\n    useEffect(\r\n        ()=>{\r\n            if(isPlay==true){\r\n                setWidth(currentTime/lengthTime[1]*100)\r\n                if (currentTime>lengthTime[1]){\r\n                    if(!isRandom && !isRepeat) if(index<12) clickCard(index+1)\r\n                    if(isRandom) clickCard(Math.floor(Math.random()*11))\r\n                    if(isRepeat) clickCard(index)\r\n\r\n                }\r\n                else {\r\n\r\n                    }\r\n            }\r\n        },[currentTime]\r\n    )\r\n    useEffect(\r\n        ()=>{\r\n            if (audio!=undefined){\r\n                audio.load()\r\n                audio.play();\r\n                setIsPlay(true);\r\n                }\r\n        }\r\n    ,[index])\r\n    useEffect(\r\n        ()=>{if (audio!=undefined) {\r\n            if(songID!=null || songID!=undefined){\r\n                document.getElementById(`song_${index}`).scrollIntoView({behavior:'smooth',block:'center'})\r\n            }\r\n            audio.onloadedmetadata= function () {\r\n                setCurrentTime(0)\r\n                setLenghTime([calTimer(audio.duration),audio.duration])}\r\n        }}\r\n    ,[audio])\r\n    useEffect(\r\n        ()=>{\r\n            if(isRandom==true) setIsRepeat(false)\r\n        },[isRandom]\r\n    )\r\n    useEffect(\r\n        ()=>{\r\n            if(isRepeat==true) setIsRandom(false)\r\n        },[isRepeat]\r\n    )\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"songs-wrapper\">\r\n                    <div className=\"row\">\r\n                        {song.map((item,numb)=>\r\n                            <div className=\"col s12 m6 l4 x3\">\r\n                                <div className={`${index}`==`${numb}`?`playing-song song `:`song`}>\r\n                                    <div className=\"song-image\" style={{backgroundImage:`url(${item.img})`}}></div>\r\n                                    <div className=\"song-info\">\r\n                                        <div id={`song_${numb}`} onClick={()=>{clickCard(numb)}} className=\"song-title\">{item.title}</div>\r\n                                        <div onClick={()=>{clickCard(numb)}} className=\"song-artist\">{item.author}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='music-controller'>\r\n                <div className='red-line' style={style}></div>\r\n                <div className='ranger-slider'>\r\n                    <input\r\n                            onMouseUp={(e)=>{slide(e)}}\r\n                            onBlur={(e)=>{e.target.defaultValue=currentTime}}\r\n                          type=\"range\" min='0' max={lengthTime[1]}  className=\"slider\" id=\"myRange\"/>\r\n                </div>\r\n                <div className='timer flex justify-center'>\r\n                    <div className='timer-current'>{`${index}`?`${calTimer(currentTime)}`:`0:00`}</div>\r\n                    <div className='current-song '>{`${index}`?`${song[index].title}`:``}</div>\r\n                    <div className=\"timer-length\">{`${index}`?`${lengthTime[0]}`:`0:00`}</div>\r\n                </div>\r\n                <div className='play-controller flex justify-center'>\r\n                    <BiSkipPrevious onClick={()=>skipprev()}  className='skip-btn prev-btn bottom-2 text-5xl flex-initial' />\r\n                    {isPlay==false\r\n                        ? <AiFillPlayCircle onClick={()=>playclick()} className='  play-btn    text-5xl flex-initial'/>\r\n                        : <AiFillPauseCircle onClick={()=>pauseclick()} className='  play-btn    text-5xl flex-initial'/>}\r\n                    <BiSkipNext onClick={()=>skipnext()} className='skip-btn next-btn text-5xl flex-initial' />\r\n                </div>\r\n                <div className='other-btn my-auto text-xl flex justify-center'>\r\n                    <FaRandom onClick={()=>setIsRandom(!isRandom)} className='random-btn  m-2 ' style={isRandom  ?  clickedStyle : notClickedStyle}/>\r\n                    <FiRepeat onClick={()=>setIsRepeat(!isRepeat)} className='repeat-btn  m-2  ' style={isRepeat ? clickedStyle : notClickedStyle}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MusicPlayerCard","D:\\Dev\\project\\chill-sound\\src\\components\\Song\\Song.js",[],{"ruleId":"41","severity":1,"message":"42","line":17,"column":12,"nodeType":"43","messageId":"44","endLine":17,"endColumn":22},{"ruleId":"41","severity":1,"message":"45","line":17,"column":23,"nodeType":"43","messageId":"44","endLine":17,"endColumn":36},{"ruleId":"46","severity":1,"message":"47","line":36,"column":22,"nodeType":"48","messageId":"49","endLine":36,"endColumn":24},{"ruleId":"46","severity":1,"message":"47","line":41,"column":22,"nodeType":"48","messageId":"49","endLine":41,"endColumn":24},{"ruleId":"46","severity":1,"message":"47","line":78,"column":24,"nodeType":"48","messageId":"49","endLine":78,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":84,"column":25,"nodeType":"48","messageId":"49","endLine":84,"endColumn":27},{"ruleId":"46","severity":1,"message":"47","line":93,"column":21,"nodeType":"48","messageId":"49","endLine":93,"endColumn":23},{"ruleId":"46","severity":1,"message":"50","line":104,"column":22,"nodeType":"48","messageId":"49","endLine":104,"endColumn":24},{"ruleId":"51","severity":1,"message":"52","line":116,"column":11,"nodeType":"53","endLine":116,"endColumn":24,"suggestions":"54"},{"ruleId":"46","severity":1,"message":"47","line":120,"column":22,"nodeType":"48","messageId":"49","endLine":120,"endColumn":24},{"ruleId":"51","severity":1,"message":"55","line":126,"column":6,"nodeType":"53","endLine":126,"endColumn":13,"suggestions":"56"},{"ruleId":"46","severity":1,"message":"47","line":128,"column":23,"nodeType":"48","messageId":"49","endLine":128,"endColumn":25},{"ruleId":"46","severity":1,"message":"47","line":129,"column":38,"nodeType":"48","messageId":"49","endLine":129,"endColumn":40},{"ruleId":"51","severity":1,"message":"57","line":136,"column":6,"nodeType":"53","endLine":136,"endColumn":13,"suggestions":"58"},{"ruleId":"46","severity":1,"message":"50","line":139,"column":24,"nodeType":"48","messageId":"49","endLine":139,"endColumn":26},{"ruleId":"46","severity":1,"message":"50","line":144,"column":24,"nodeType":"48","messageId":"49","endLine":144,"endColumn":26},{"ruleId":"46","severity":1,"message":"50","line":155,"column":59,"nodeType":"48","messageId":"49","endLine":155,"endColumn":61},{"ruleId":"46","severity":1,"message":"50","line":182,"column":28,"nodeType":"48","messageId":"49","endLine":182,"endColumn":30},"no-unused-vars","'changeTime' is assigned a value but never used.","Identifier","unusedVar","'setChangeTime' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clickCard', 'index', 'isPlay', 'isRandom', 'isRepeat', and 'lengthTime'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setWidth' needs the current value of 'lengthTime'.","ArrayExpression",["59"],"React Hook useEffect has a missing dependency: 'audio'. Either include it or remove the dependency array.",["60"],"React Hook useEffect has missing dependencies: 'index' and 'songID'. Either include them or remove the dependency array.",["61"],{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [clickCard, currentTime, index, isPlay, isRandom, isRepeat, lengthTime]",{"range":"68","text":"69"},"Update the dependencies array to be: [audio, index]",{"range":"70","text":"71"},"Update the dependencies array to be: [audio, index, songID]",{"range":"72","text":"73"},[3782,3795],"[clickCard, currentTime, index, isPlay, isRandom, isRepeat, lengthTime]",[4001,4008],"[audio, index]",[4418,4425],"[audio, index, songID]"]